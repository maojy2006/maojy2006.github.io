<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <title>Maudoo&#x27;s blog</title>
    <link href="https://maojy2006.cn/feed.xml" rel="self" />
    <link href="https://maojy2006.cn" />
    <updated>2025-08-07T10:57:46+08:00</updated>
    <author>
        <name>maudoo</name>
    </author>
    <id>https://maojy2006.cn</id>

    <entry>
        <title>MySQL百万数据ST_Distance_Sphere函数的优化实践</title>
        <author>
            <name>maudoo</name>
        </author>
        <link href="https://maojy2006.cn/mysql_st_distance_sphere/"/>
        <id>https://maojy2006.cn/mysql_st_distance_sphere/</id>

        <updated>2025-08-06T21:30:09+08:00</updated>
            <summary>
                <![CDATA[
                    场景 78万+条订单数据，使用ST_Distance_Sphere函数逐个判断两点距离进行比较 待优化代码 每次接口收到请求，查询数据库需要完成一次全表扫描，逐个比对且对每一条数据都执行一次昂贵的球面距离计算。 优化前查询耗时约30秒，正在召唤测试跟前端的连环拷打ing~ 当前存储经纬度的结构，且只创建了一个B+数索引 pre_destination_longitude decimal(10, 6) null comment &#39;预计目的地经度&#39;, pre_destination_latitude decimal(10, 6) null comment &#39;预计目的地纬度&#39;, ... create index idx_order_info_dest on&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h2 id="场景">场景</h2>
<p>78万+条订单数据，使用ST_Distance_Sphere函数逐个判断两点距离进行比较</p><figure class="post__image"><img src="https://cdn.nlark.com/yuque/0/2025/png/54966136/1754403795978-b7187104-5e1c-404a-879d-cd5ff138a486.png" alt="待优化代码"  data-is-external-image="true"></figure><p>待优化代码</p><figure class="post__image"><img loading="lazy" src="https://cdn.nlark.com/yuque/0/2025/png/54966136/1754404541716-716f5537-3776-44e6-be2b-df4a9e14219f.png" alt=""  data-is-external-image="true"></figure><p><figure class="post__image"><img loading="lazy" src="file:///C:\Users\29503\AppData\Roaming\marktext\images\2025-08-05-09-14-28-image.png?msec=1754535087354" alt=""  data-is-external-image="true"></figure>
每次接口收到请求，查询数据库需要完成一次全表扫描，逐个比对且对每一条数据都执行一次昂贵的球面距离计算。</p><table>
<thead>
<tr>
<th>type</th>
<th>rows</th>
<th>Extra</th>
</tr>
</thead>
<tbody><tr>
<td>ALL</td>
<td>1685899</td>
<td>Using where</td>
</tr>
</tbody></table>
<p>优化前查询耗时约30秒，正在召唤测试跟前端的连环拷打ing~</p><h2 id="表结构优化-添加point索引">表结构优化-添加Point索引</h2>
<p>当前存储经纬度的结构，且只创建了一个B+数索引</p><pre><code class="language-java">    pre_destination_longitude    decimal(10, 6) null comment &#39;预计目的地经度&#39;,
    pre_destination_latitude     decimal(10, 6) null comment &#39;预计目的地纬度&#39;,
...
create index idx_order_info_dest
    on order_information (pre_destination_longitude, pre_destination_latitude);
</code></pre>
<p>于是添加空间索引</p><blockquote>
<p>空间索引的作用，就是给数据库一张“地图”，让它能从“大海捞针”的全表扫描，变成“按图索骥”的精准打击。</p></blockquote>
<p>由于表中不止网约车订单数据（筛选条件<code>order_type IS NULL</code>），因此可能有部分数据存在pre_destination_longitude、pre_destination_latitude数据为null的情况。但是创建空间索引必须要限制列为非空格式，就像地图上不应该存在不知道位置的点。故采用下面语句修改表结构，将为null的数据设置为“无害的默认值 ”</p><p>下面这段SQL耗时较长（共180万+条数据跑了10分钟多），运行时注意环境</p><pre><code class="language-java">-- 第1步：添加一个允许为NULL的列
ALTER TABLE order_information 
ADD COLUMN `coordinate` POINT NULL COMMENT &#39;经纬度坐标点-索引加速&#39;;

-- 第2步：用现有数据填充这个新列
UPDATE order_information 
SET coordinate = POINT(pre_destination_longitude, pre_destination_latitude) 
WHERE pre_destination_longitude IS NOT NULL AND pre_destination_latitude IS NOT NULL;

-- 第3步：处理那些经纬度本身就是NULL的数据
UPDATE order_information 
SET coordinate = POINT(0, 0) 
WHERE coordinate IS NULL;

-- 第4步：修改列定义为 NOT NULL
ALTER TABLE order_information 
MODIFY COLUMN `coordinate` POINT NOT NULL COMMENT &#39;经纬度坐标点-索引加速&#39;;

-- 第5步：创建空间索引
CREATE SPATIAL INDEX `idx_spatial_coordinate` ON `order_information`(`coordinate`);
</code></pre>
<p>空间索引创建完还需要优化SQL。</p><p>优化逻辑：</p><ol>
<li>在java层以入参坐标（及半径）为中心，在地图中划出待查询范围，略去绝大部分区域</li>
<li>在正方形中比较坐标距离，最后获得圆形区域中包含的各点</li>
</ol>
<figure class="post__image"><img loading="lazy" src="https://cdn.nlark.com/yuque/0/2025/jpeg/54966136/1754484160096-818a8da7-a2ab-4035-a682-b023ce4486d1.jpeg" alt="画板"  data-is-external-image="true"></figure><p>不止这一种SQL层优化方案，现在使用的是 边界框+空间索引的方案</p><p>还有包括但不限于：Partitioning (分区)、<font style="color:rgb(44, 44, 54);">Z-Order(混合经纬度)</font></p><p>如果你需要了解更多 请看–&gt;<a href="https://mysql.rjweb.org/doc.php/find_nearest_in_mysql">MySQL Techniques for “Find Nearest”</a></p><p>但是主播在与AI的搏斗中始终没能让它给出合适的、能在我的MySQL用上创建的Point类索引的SQL。如果看到这的你知道了可以教教我</p><p>≧ ﹏ ≦</p><p>而且数据库设计文档即将完工，不好意思让写文档的同学再修改，于是尝试其他方法</p><h2 id="程序逻辑优化-整合redis实现缓存">程序逻辑优化-整合Redis实现缓存</h2>
<p>我以业务逻辑为主线实现的Redis缓存。业务要求打开页面获得选择框 /getNameTable，选定某一区域获得其详细信息并且详细信息分为三页。其中第二页 /showPage2 内容需要连接多表且数据量极大的表，返回数据时间基本上在十几秒，而其他页面的访问速度并不需要通过缓存优化。但是 /showPage2 的传参多样，因此并不是很合适在启动的时候全部预加载存入Redis。因此我选择通过调用第一页 /showPage1 时使用多线程技术实现后台预加载第二页数据，在缓存加载成功后切换页面的速度将有极大提升。</p><p>实现线程池</p><pre><code class="language-java">package com.name.project.config;

import com.google.common.util.concurrent.ThreadFactoryBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadFactory;

/**
 * @Description 自定义创建线程池
 */
@Configuration
public class ThreadPoolConfig {
    @Bean(&quot;preCacheExecutor&quot;)
    public ExecutorService preCacheExecutor() {
        ThreadFactory namedThreadFactory = new ThreadFactoryBuilder()
                .setNameFormat(&quot;precache-pool-%d&quot;).build();

        // 创建一个固定大小的线程池-根据业务需求量执行线程池大小
        return Executors.newFixedThreadPool(8, namedThreadFactory);
    }
}
</code></pre>
<p>实现类中整合Redis的加载方式</p><pre><code class="language-java">//新增整合了Redis的方法调用模式
@Override
public DataResult&lt;MapShowPage2&gt; getMapShowPage2WithCache(String longitude, String latitude, String name) {
    // 1. 生成缓存键
    String cacheKey = &quot;mapShowPage2:&quot; + longitude + &quot;:&quot; + latitude + &quot;:&quot; + name;

    // 2. 尝试从缓存获取
    MapShowPage2 cachedResult = (MapShowPage2) redisTemplate.opsForValue().get(cacheKey);
    if (cachedResult != null) {
        return DataResult.success(cachedResult);
    }

    // 3. 缓存未命中，执行业务逻辑获取数据，showPage2为业务代码
    DataResult&lt;MapShowPage2&gt; result = this.showPage2(longitude, latitude, name);

    // 4. 存入缓存并设置过期时间(24小时)
    if (result != null &amp;&amp; result.getData() != null) {
        redisTemplate.opsForValue().set(cacheKey, result.getData(), 24, TimeUnit.HOURS);
    }

    // 5. 返回结果
    return result;
}

//修改showPage1方法
@Override
public DataResult&lt;MapShowPage1&gt; showPage1(String longitude,String latitude,String name) {

    //实现第二页预加载
    // 使用CompletableFuture.runAsync提交一个异步任务
    CompletableFuture.runAsync(() -&gt; {
        // 这部分代码将在preCacheExecutor线程池中的某个线程上运行
        try {
            System.out.println(&quot;线程 [&quot; + Thread.currentThread().getName() + &quot;] 开始异步预热第二页缓存...&quot;);
            this.getMapShowPage2WithCache(longitude, latitude, name);
            System.out.println(&quot;线程 [&quot; + Thread.currentThread().getName() + &quot;] 异步预热任务结束。&quot;);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }, preCacheExecutor);

...原本业务逻辑...

}
</code></pre>
<p>Redis缓存后可以实现毫秒级响应</p><p>对各请求查询请求次数再搭配定时任务可以实现对热门需求的定时刷新。</p><h2 id="程序逻辑优化-springboot定时任务">程序逻辑优化-SpringBoot定时任务</h2>
<p>@Scheduled(fixedRate = 10 * 24 * 60 * 60 * 1000)</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>服务器VNCServer安装</title>
        <author>
            <name>maudoo</name>
        </author>
        <link href="https://maojy2006.cn/vnconkylinoffline/"/>
        <id>https://maojy2006.cn/vnconkylinoffline/</id>

        <updated>2025-07-19T14:47:58+08:00</updated>
            <summary>
                <![CDATA[
                    环境：Kylin Linux Advanced Server release V10 (SP3) /(Lance)-aarch64-Build23/20230324 在 公网源 下载 tigervnc-server服务 上传至服务器 /root/tigervnc-server # ls /root/tigervnc-server 安装前检查 # rpm -qa | grep&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>环境：Kylin Linux Advanced Server
release V10 (SP3) /(Lance)-aarch64-Build23/20230324</p><h3 id="安装服务端（无外网）">安装服务端（无外网）</h3>
<h4 id="下载">下载</h4>
<p>在 <a href="https://update.cs2c.com.cn/NS/V10/V10SP3/os/adv/lic/base/aarch64/Packages/tigervnc-server-1.10.1-5.p04.ky10.aarch64.rpm">公网源</a> 下载 tigervnc-server服务</p><p>上传至服务器 <code>/root/tigervnc-server</code></p><pre><code># ls /root/tigervnc-server
</code></pre>
<figure class="post__image"><img loading="lazy" src="file:///C:\Users\29503\AppData\Roaming\marktext\images\2025-07-11-19-42-55-image.png?msec=1752907620655" alt=""  data-is-external-image="true"></figure><h4 id="安装前检查">安装前检查</h4>
<pre><code># rpm -qa | grep  tigervnc-server
</code></pre>
<figure class="post__image"><img loading="lazy" src="file:///C:\Users\29503\AppData\Roaming\marktext\images\2025-07-11-19-49-29-image.png?msec=1752907620665" alt=""  data-is-external-image="true"></figure><p>（保持和图中的一致，即无本次需要安装的 tigervnc-server-1.10.1-5.p04.ky10.aarch64）</p><h4 id="安装">安装</h4>
<pre><code># rpm  -ivh  tiqervnc-server-1.10.1-5.p04.ky10.x86_64.rpm
</code></pre>
<p>安装后再执行检查已安装服务，可见</p><figure class="post__image"><img loading="lazy" src="file:///C:\Users\29503\AppData\Roaming\marktext\images\2025-07-11-19-54-10-image.png?msec=1752907620656" alt=""  data-is-external-image="true"></figure><h3 id="配置服务端">配置服务端</h3>
<h4 id="启动服务">启动服务</h4>
<pre><code># vncserver :{VCN进程id}
</code></pre>
<h4 id="开放防火墙">开放防火墙</h4>
<pre><code># firewall-cmd  --add-port={5900+VCN进程id}/tcp  --permanent

//重启防火墙
# firewall-cmd --reload
</code></pre>
<h4 id="查看服务列表">查看服务列表</h4>
<pre><code># vncserver  -list
</code></pre>
<h4 id="查看防火墙放开情况">查看防火墙放开情况</h4>
<pre><code># firewall-cmd --list-all
</code></pre>
<h4 id="结束服务">结束服务</h4>
<pre><code># vncserver  -kill :{VCN进程id}
</code></pre>
<h4 id="关闭防火墙">关闭防火墙</h4>
<pre><code># firewall-cmd --remove-port={5900+VCN进程id}/tcp --permanent

//重启防火墙
# firewall-cmd --reload
</code></pre>
<figure class="post__image"><img loading="lazy" src="file:///C:\Users\29503\AppData\Roaming\marktext\images\2025-07-11-20-13-50-image.png?msec=1752907620684" alt=""  data-is-external-image="true"></figure><h3 id="参考文档">参考文档</h3>
<p><a href="https://blog.csdn.net/u012306701/article/details/137272461">麒麟V10-server-sp1-sp2-sp3关于vncserver安装及使用_tigervnc-server</a></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>📃退堂鼓一级表演家-Maudoo的说明书</title>
        <author>
            <name>maudoo</name>
        </author>
        <link href="https://maojy2006.cn/about-me/"/>
        <id>https://maojy2006.cn/about-me/</id>

        <updated>2024-09-07T17:34:55+08:00</updated>
            <summary>
                <![CDATA[
                    👋Hi 这里是Maudoo的个人博客 这是一篇关于我的说明书，通过它你能更好的了解我 期待能和你交朋友 一起做有意思的事🧐 操作指南 如何联系我 hi@maojy2006.cn 保养维护 故障排除 为什么没回复你 可能是我意念回复了🤔 33%是土生土长的广州人+33%是爸爸的江苏老家+33%是妈妈的湖北老家 出厂18年 我的使用说明
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h6 class="align-center">👋Hi 这里是Maudoo的个人博客</h6>
<h6 class="align-center">这是一篇关于我的说明书，通过它你能更好的了解我</h6>
<h6 class="align-center">期待能和你交朋友 一起做有意思的事🧐</h6>
<hr>
<table style="border-collapse: collapse; width: 100%; height: 150.062px;" border="1">
<tbody>
<tr style="height: 50.0208px;">
<td style="width: 33.3007%; height: 50.0208px;"><span style="color: #95a5a6;">操作指南</span></td>
<td style="width: 33.3007%; height: 50.0208px;">如何联系我</td>
<td style="width: 33.3037%; height: 50.0208px;">hi@maojy2006.cn</td>
</tr>
<tr style="height: 50.0208px;">
<td style="width: 33.3007%; height: 50.0208px;"><span style="color: #95a5a6;">保养维护</span></td>
<td style="width: 33.3007%; height: 50.0208px;"> </td>
<td style="width: 33.3037%; height: 50.0208px;"> </td>
</tr>
<tr style="height: 50.0208px;">
<td style="width: 33.3007%; height: 50.0208px;"><span style="color: #95a5a6;">故障排除</span></td>
<td style="width: 33.3007%; height: 50.0208px;">为什么没回复你</td>
<td style="width: 33.3037%; height: 50.0208px;">可能是我意念回复了🤔</td>
</tr>
</tbody>
</table>
<p> </p>
<h2>我的成分：</h2>
<p>33%是土生土长的广州人+33%是爸爸的江苏老家+33%是妈妈的湖北老家</p>
<h2>我的产龄：</h2>
<p>出厂18年</p>
<p> </p>
<p>我的使用说明</p>
            ]]>
        </content>
    </entry>
</feed>
